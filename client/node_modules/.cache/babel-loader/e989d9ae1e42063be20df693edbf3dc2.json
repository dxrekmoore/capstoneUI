{"ast":null,"code":"/* this file will implement the user actions in the client/src/api/index.js \nincludes, fetchPosts, createPosts, etc\nThe actions will be used in App.js, and when the user implmenet such in the frontend, \nfunctions in this file will react with the backend\n\naction will need to use api\n*/\n//import everything as a fucntion as an api\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\nimport * as api from '../api/index.js'; //Action Creatros: functions that retrun an action, an action will have a type and a payload \n//we deal with the async data\n\nexport const getPosts = () => async dispatch => {\n  try {\n    //get response from api, which will always have data object from the backend, and then we can get the data\n    const {\n      data\n    } = await api.fetchPosts(); //payload will store the data\n\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: 'CREATE',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: 'UPDATE',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: 'DELETE',\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: 'LIKE',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"sources":["/Users/ardlanwang/Documents/GitHub/capstoneUI/src/uploading/client/src/actions/posts.js"],"names":["FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","api","getPosts","dispatch","data","fetchPosts","type","payload","error","console","log","createPost","post","updatePost","id","deletePost","likePost","message"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,MAApC,EAA4CC,IAA5C,QAAwD,0BAAxD;AACA,OAAO,KAAKC,GAAZ,MAAqB,iBAArB,C,CAEA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC9C,MAAI;AACA;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACI,UAAJ,EAAvB,CAFA,CAGA;;AACAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEV,SAAR;AAAmBW,MAAAA,OAAO,EAAEH;AAA5B,KAAD,CAAR;AACL,GALC,CAKA,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CATM;AAYP,OAAO,MAAMG,UAAU,GAAIC,IAAD,IAAU,MAAOT,QAAP,IAAoB;AACtD,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACU,UAAJ,CAAeC,IAAf,CAAvB;AAEAT,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAEH;AAA3B,KAAD,CAAR;AACD,GAJD,CAIE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CARM;AAUP,OAAO,MAAMK,UAAU,GAAG,CAACC,EAAD,EAAKF,IAAL,KAAc,MAAOT,QAAP,IAAoB;AAC1D,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACY,UAAJ,CAAeC,EAAf,EAAmBF,IAAnB,CAAvB;AAEAT,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAEH;AAA3B,KAAD,CAAR;AACD,GAJD,CAIE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CARM;AAUP,OAAO,MAAMO,UAAU,GAAID,EAAD,IAAQ,MAAOX,QAAP,IAAoB;AACpD,MAAI;AACF,UAAMF,GAAG,CAACc,UAAJ,CAAeD,EAAf,CAAN;AAEAX,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAEO;AAA3B,KAAD,CAAR;AACD,GAJD,CAIE,OAAON,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CARM;AAUP,OAAO,MAAMQ,QAAQ,GAAIF,EAAD,IAAQ,MAAOX,QAAP,IAAoB;AAClD,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACe,QAAJ,CAAaF,EAAb,CAAvB;AAEAX,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,OAAO,EAAEH;AAAzB,KAAD,CAAR;AACD,GAJD,CAIE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACS,OAAlB;AACD;AACF,CARM","sourcesContent":["/* this file will implement the user actions in the client/src/api/index.js \nincludes, fetchPosts, createPosts, etc\nThe actions will be used in App.js, and when the user implmenet such in the frontend, \nfunctions in this file will react with the backend\n\naction will need to use api\n*/\n\n//import everything as a fucntion as an api\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\nimport * as api from '../api/index.js';\n\n//Action Creatros: functions that retrun an action, an action will have a type and a payload \n//we deal with the async data\nexport const getPosts = () => async (dispatch) => {\n    try {\n        //get response from api, which will always have data object from the backend, and then we can get the data\n        const { data } = await api.fetchPosts();\n        //payload will store the data\n        dispatch({ type: FETCH_ALL, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n\nexport const createPost = (post) => async (dispatch) => {\n  try {\n    const { data } = await api.createPost(post);\n\n    dispatch({ type: 'CREATE', payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n  \nexport const updatePost = (id, post) => async (dispatch) => {\n  try {\n    const { data } = await api.updatePost(id, post);\n\n    dispatch({ type: 'UPDATE', payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n  \nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await api.deletePost(id);\n\n    dispatch({ type: 'DELETE', payload: id });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const likePost = (id) => async (dispatch) => {\n  try {\n    const { data } = await api.likePost(id);\n\n    dispatch({ type: 'LIKE', payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};"]},"metadata":{},"sourceType":"module"}