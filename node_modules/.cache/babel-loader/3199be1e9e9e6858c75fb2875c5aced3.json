{"ast":null,"code":"/*a reducer is a function, that accpets states or actions in the website, \nand it can do the corresponded actions */\n//add more actions here\nexport default (function () {\n  let posts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCH_ALL':\n      return action.payload;\n\n    case 'CREATE':\n      return [...posts, action.payload];\n\n    case 'UPDATE':\n      //posts.map will return an array => we mapping post the array, and we make change in there, and it return the changed array\n      return posts.map(post => post._id === action.payload._id ? action.payload : post);\n    //  action.payload is the updated post\n\n    case 'DELETE':\n      return posts.filter(post => post._id !== action.payload);\n\n    default:\n      return posts;\n\n    case 'LIKE':\n      return posts.map(post => post._id === action.payload._id ? action.payload : post);\n  }\n});","map":{"version":3,"sources":["/Users/ardlanwang/Documents/GitHub/capstoneUI/src/uploading/client/src/reducers/posts.js"],"names":["posts","action","type","payload","map","post","_id","filter"],"mappings":"AAAA;AACA;AAGA;AACA,gBAAe,YAAwB;AAAA,MAAvBA,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAOD,MAAM,CAACE,OAAd;;AACF,SAAK,QAAL;AACE,aAAO,CAAC,GAAGH,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;;AACF,SAAK,QAAL;AACE;AACA,aAAOH,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAWA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAP,CAAeG,GAA5B,GAAkCL,MAAM,CAACE,OAAzC,GAAmDE,IAAxE,CAAP;AAAsF;;AACxF,SAAK,QAAL;AACE,aAAOL,KAAK,CAACO,MAAN,CAAcF,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAA3C,CAAP;;AACF;AACE,aAAOH,KAAP;;AACF,SAAK,MAAL;AACE,aAAOA,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAWA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAP,CAAeG,GAA5B,GAAkCL,MAAM,CAACE,OAAzC,GAAmDE,IAAxE,CAAP;AAbJ;AAgBD,CAjBD","sourcesContent":["/*a reducer is a function, that accpets states or actions in the website, \nand it can do the corresponded actions */\n\n\n//add more actions here\nexport default (posts = [], action) => {\n  switch (action.type) {\n    case 'FETCH_ALL':\n      return action.payload;\n    case 'CREATE':\n      return [...posts, action.payload];\n    case 'UPDATE':\n      //posts.map will return an array => we mapping post the array, and we make change in there, and it return the changed array\n      return posts.map((post) => (post._id === action.payload._id ? action.payload : post));//  action.payload is the updated post\n    case 'DELETE':\n      return posts.filter((post) => post._id !== action.payload);  \n    default:\n      return posts;\n    case 'LIKE':\n      return posts.map((post) => (post._id === action.payload._id ? action.payload : post));\n      \n  }\n};\n\n"]},"metadata":{},"sourceType":"module"}