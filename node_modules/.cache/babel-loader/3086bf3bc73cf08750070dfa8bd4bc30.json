{"ast":null,"code":"\"use strict\";\n\nconst axios = require(\"axios\");\n\nclass Geocodio {\n  constructor(apiKey, hostname, apiVersion) {\n    this.apiKey = apiKey || process.env.GEOCODIO_API_KEY || null;\n    this.hostname = hostname || process.env.GEOCODIO_HOSTNAME || \"api.geocod.io\";\n    this.apiVersion = apiVersion || process.env.GEOCODIO_API_VERSION || \"v1.7\";\n    this.SINGLE_TIMEOUT_MS = 5000;\n    this.BATCH_TIMEOUT_MS = 30 * 60 * 1000;\n    this.HTTP_HEADERS = {\n      \"User-Agent\": \"geocodio-library-node/1.3.0\"\n    };\n    this.ADDRESS_COMPONENT_PARAMETERS = [\"street\", \"city\", \"state\", \"postal_code\", \"country\"];\n  }\n\n  geocode(query) {\n    let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return this.handleRequest(\"geocode\", query, fields, limit);\n  }\n\n  reverse(query) {\n    let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return this.handleRequest(\"reverse\", query, fields, limit);\n  }\n\n  handleRequest(endpoint, query) {\n    let fields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    const url = this.formatUrl(endpoint);\n    let queryParameters = {\n      api_key: this.apiKey,\n      fields: fields.join(\",\")\n    };\n\n    if (limit) {\n      queryParameters.limit = limit;\n    }\n\n    query = this.preprocessQuery(query, endpoint);\n    let response = null;\n\n    if (this.isSingleQuery(query)) {\n      response = this.performSingleRequest(url, query, queryParameters);\n    } else {\n      query = this.preprocessQueryList(query, endpoint);\n      response = this.performBatchRequest(url, query, queryParameters);\n    }\n\n    return response.then(response => response.data).catch(error => {\n      if (error.response) {\n        const errorMessage = error.response.data.error || \"Error\";\n        const code = error.response.status || 0;\n        const decoratedError = new Error(errorMessage);\n        decoratedError.code = code;\n        throw decoratedError;\n      } else {\n        throw error;\n      }\n    });\n  }\n\n  formatUrl(endpoint) {\n    return `https://${this.hostname}/${this.apiVersion}/${endpoint}`;\n  }\n\n  preprocessQueryList(query, endpoint) {\n    for (const key in query) {\n      if (Array.isArray(query) || Object.prototype.hasOwnProperty.call(query, key)) {\n        query[key] = this.preprocessQuery(query[key], endpoint);\n      }\n    }\n\n    return query;\n  }\n\n  preprocessQuery(query, endpoint) {\n    // Convert lat/lon to a comma-separated string\n    const queryIsCoordinateArray = Array.isArray(query) && query.length === 2;\n\n    if (endpoint === \"reverse\" && queryIsCoordinateArray) {\n      const [latitude, longitude] = query;\n\n      if (this.isNumeric(latitude) && this.isNumeric(longitude)) {\n        query = `${latitude},${longitude}`;\n      }\n    }\n\n    return query;\n  }\n\n  isSingleQuery(query) {\n    if (typeof query === \"object\") {\n      const addressComponentKeys = Object.keys(query).filter(value => this.ADDRESS_COMPONENT_PARAMETERS.includes(value));\n      return addressComponentKeys.length >= 1;\n    }\n\n    return true;\n  }\n\n  performSingleRequest(url, query, queryParameters) {\n    if (typeof query === \"object\") {\n      queryParameters = { ...queryParameters,\n        ...query\n      };\n    } else {\n      queryParameters.q = query;\n    }\n\n    return axios.get(url, {\n      params: queryParameters,\n      timeout: this.SINGLE_TIMEOUT_MS,\n      headers: this.HTTP_HEADERS\n    });\n  }\n\n  performBatchRequest(url, queries, queryParameters) {\n    return axios.post(url, queries, {\n      params: queryParameters,\n      timeout: this.BATCH_TIMEOUT_MS,\n      headers: this.HTTP_HEADERS\n    });\n  }\n\n  isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n}\n\nmodule.exports = Geocodio;","map":{"version":3,"sources":["/home/soundmapper/test/capstoneUI/node_modules/geocodio-library-node/lib/index.js"],"names":["axios","require","Geocodio","constructor","apiKey","hostname","apiVersion","process","env","GEOCODIO_API_KEY","GEOCODIO_HOSTNAME","GEOCODIO_API_VERSION","SINGLE_TIMEOUT_MS","BATCH_TIMEOUT_MS","HTTP_HEADERS","ADDRESS_COMPONENT_PARAMETERS","geocode","query","fields","limit","handleRequest","reverse","endpoint","url","formatUrl","queryParameters","api_key","join","preprocessQuery","response","isSingleQuery","performSingleRequest","preprocessQueryList","performBatchRequest","then","data","catch","error","errorMessage","code","status","decoratedError","Error","key","Array","isArray","Object","prototype","hasOwnProperty","call","queryIsCoordinateArray","length","latitude","longitude","isNumeric","addressComponentKeys","keys","filter","value","includes","q","get","params","timeout","headers","queries","post","n","isNaN","parseFloat","isFinite","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst axios = require(\"axios\");\n\nclass Geocodio {\n  constructor(apiKey, hostname, apiVersion) {\n    this.apiKey = apiKey || process.env.GEOCODIO_API_KEY || null;\n    this.hostname =\n      hostname || process.env.GEOCODIO_HOSTNAME || \"api.geocod.io\";\n    this.apiVersion = apiVersion || process.env.GEOCODIO_API_VERSION || \"v1.7\";\n\n    this.SINGLE_TIMEOUT_MS = 5000;\n    this.BATCH_TIMEOUT_MS = 30 * 60 * 1000;\n\n    this.HTTP_HEADERS = {\n      \"User-Agent\": \"geocodio-library-node/1.3.0\"\n    };\n\n    this.ADDRESS_COMPONENT_PARAMETERS = [\n      \"street\",\n      \"city\",\n      \"state\",\n      \"postal_code\",\n      \"country\"\n    ];\n  }\n\n  geocode(query, fields = [], limit = null) {\n    return this.handleRequest(\"geocode\", query, fields, limit);\n  }\n\n  reverse(query, fields = [], limit = null) {\n    return this.handleRequest(\"reverse\", query, fields, limit);\n  }\n\n  handleRequest(endpoint, query, fields = [], limit = null) {\n    const url = this.formatUrl(endpoint);\n\n    let queryParameters = {\n      api_key: this.apiKey,\n      fields: fields.join(\",\")\n    };\n\n    if (limit) {\n      queryParameters.limit = limit;\n    }\n\n    query = this.preprocessQuery(query, endpoint);\n\n    let response = null;\n    if (this.isSingleQuery(query)) {\n      response = this.performSingleRequest(url, query, queryParameters);\n    } else {\n      query = this.preprocessQueryList(query, endpoint);\n      response = this.performBatchRequest(url, query, queryParameters);\n    }\n\n    return response\n      .then(response => response.data)\n      .catch(error => {\n        if (error.response) {\n          const errorMessage = error.response.data.error || \"Error\";\n          const code = error.response.status || 0;\n\n          const decoratedError = new Error(errorMessage);\n          decoratedError.code = code;\n\n          throw decoratedError;\n        } else {\n          throw error;\n        }\n      });\n  }\n\n  formatUrl(endpoint) {\n    return `https://${this.hostname}/${this.apiVersion}/${endpoint}`;\n  }\n\n  preprocessQueryList(query, endpoint) {\n    for (const key in query) {\n      if (\n        Array.isArray(query) ||\n        Object.prototype.hasOwnProperty.call(query, key)\n      ) {\n        query[key] = this.preprocessQuery(query[key], endpoint);\n      }\n    }\n\n    return query;\n  }\n\n  preprocessQuery(query, endpoint) {\n    // Convert lat/lon to a comma-separated string\n    const queryIsCoordinateArray = Array.isArray(query) && query.length === 2;\n\n    if (endpoint === \"reverse\" && queryIsCoordinateArray) {\n      const [latitude, longitude] = query;\n\n      if (this.isNumeric(latitude) && this.isNumeric(longitude)) {\n        query = `${latitude},${longitude}`;\n      }\n    }\n\n    return query;\n  }\n\n  isSingleQuery(query) {\n    if (typeof query === \"object\") {\n      const addressComponentKeys = Object.keys(query).filter(value =>\n        this.ADDRESS_COMPONENT_PARAMETERS.includes(value)\n      );\n\n      return addressComponentKeys.length >= 1;\n    }\n\n    return true;\n  }\n\n  performSingleRequest(url, query, queryParameters) {\n    if (typeof query === \"object\") {\n      queryParameters = {\n        ...queryParameters,\n        ...query\n      };\n    } else {\n      queryParameters.q = query;\n    }\n\n    return axios.get(url, {\n      params: queryParameters,\n      timeout: this.SINGLE_TIMEOUT_MS,\n      headers: this.HTTP_HEADERS\n    });\n  }\n\n  performBatchRequest(url, queries, queryParameters) {\n    return axios.post(url, queries, {\n      params: queryParameters,\n      timeout: this.BATCH_TIMEOUT_MS,\n      headers: this.HTTP_HEADERS\n    });\n  }\n\n  isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n}\n\nmodule.exports = Geocodio;\n"]},"metadata":{},"sourceType":"script"}